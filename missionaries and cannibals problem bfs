{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b76ff25b",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b [[[3, 3], [0, 0], 'L']]\n",
      "v []\n",
      "b [[[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R']]\n",
      "v [[[3, 3], [0, 0], 'L']]\n",
      "b [[[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R']]\n",
      "b [[[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R']]\n",
      "b [[[3, 2], [0, 1], 'L']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R']]\n",
      "b [[[3, 0], [0, 3], 'R']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L']]\n",
      "b [[[3, 1], [0, 2], 'L']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L'], [[3, 0], [0, 3], 'R']]\n",
      "b [[[1, 1], [2, 2], 'R']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L'], [[3, 0], [0, 3], 'R'], [[3, 1], [0, 2], 'L']]\n",
      "b [[[2, 2], [1, 1], 'L']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L'], [[3, 0], [0, 3], 'R'], [[3, 1], [0, 2], 'L'], [[1, 1], [2, 2], 'R']]\n",
      "b [[[0, 2], [3, 1], 'R']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L'], [[3, 0], [0, 3], 'R'], [[3, 1], [0, 2], 'L'], [[1, 1], [2, 2], 'R'], [[2, 2], [1, 1], 'L']]\n",
      "b [[[0, 3], [3, 0], 'L']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L'], [[3, 0], [0, 3], 'R'], [[3, 1], [0, 2], 'L'], [[1, 1], [2, 2], 'R'], [[2, 2], [1, 1], 'L'], [[0, 2], [3, 1], 'R']]\n",
      "b [[[0, 1], [3, 2], 'R']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L'], [[3, 0], [0, 3], 'R'], [[3, 1], [0, 2], 'L'], [[1, 1], [2, 2], 'R'], [[2, 2], [1, 1], 'L'], [[0, 2], [3, 1], 'R'], [[0, 3], [3, 0], 'L']]\n",
      "b [[[1, 1], [2, 2], 'L'], [[0, 2], [3, 1], 'L']]\n",
      "v [[[3, 3], [0, 0], 'L'], [[3, 1], [0, 2], 'R'], [[3, 2], [0, 1], 'R'], [[2, 2], [1, 1], 'R'], [[3, 2], [0, 1], 'L'], [[3, 0], [0, 3], 'R'], [[3, 1], [0, 2], 'L'], [[1, 1], [2, 2], 'R'], [[2, 2], [1, 1], 'L'], [[0, 2], [3, 1], 'R'], [[0, 3], [3, 0], 'L'], [[0, 1], [3, 2], 'R']]\n",
      "Destination Reached\n",
      "[[[0, 2], [3, 1], 'L'], [[0, 0], [3, 3], 'R']]\n"
     ]
    }
   ],
   "source": [
    "boat = [[[3,3],[0,0],'L']]\n",
    "visited=[]\n",
    "final = [[0,0],[3,3],'R']\n",
    "bfs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cf1acad3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bfs():\n",
    "    if final in boat:\n",
    "        print(\"Destination Reached\")\n",
    "        print(boat)\n",
    "        return\n",
    "    else:\n",
    "        x=boat[0]\n",
    "        if x[-1]=='R':\n",
    "            leftb()\n",
    "        else:\n",
    "            rightb()\n",
    "    bfs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "30c58c73",
   "metadata": {},
   "outputs": [],
   "source": [
    "def leftb():\n",
    "    print(\"b\",boat)\n",
    "    print(\"v\",visited)    \n",
    "    x=boat.pop(0)\n",
    "    visited.append(x)\n",
    "    left = x[0]\n",
    "    right = x[1]\n",
    "    if right[0]>=2:\n",
    "        d=[[left[0]+2, left[1]],[right[0]-2, right[1]],'L']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)                  \n",
    "    if right[0]>=1:\n",
    "        d=[[left[0]+1, left[1]],[right[0]-1, right[1]],'L']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)               \n",
    "    if right[1]>=2:\n",
    "        d=[[left[0], left[1]+2],[right[0], right[1]-2],'L']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)               \n",
    "    if right[1]>=1:\n",
    "        d=[[left[0], left[1]+1],[right[0], right[1]-1],'L']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)             \n",
    "    if right[0]>=1 and right[1]>=1:\n",
    "        d=[[left[0]+1, left[1]+1],[right[0]-1,right[1]-1],'L']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5c531284",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rightb():\n",
    "    print(\"b\",boat)\n",
    "    print(\"v\",visited)\n",
    "    x=boat.pop(0)\n",
    "    visited.append(x)\n",
    "    left = x[0]\n",
    "    right = x[1]\n",
    "    if left[0]>=2:\n",
    "        d=[[left[0]-2, left[1]],[right[0]+2, right[1]],'R']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)                  \n",
    "    if left[0]>=1:\n",
    "        d=[[left[0]-1, left[1]],[right[0]+1, right[1]],'R']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)               \n",
    "    if left[1]>=2:\n",
    "        d=[[left[0], left[1]-2],[right[0], right[1]+2],'R']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)               \n",
    "    if left[1]>=1:\n",
    "        d=[[left[0], left[1]-1],[right[0], right[1]+1],'R']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)             \n",
    "    if left[0]>=1 and left[1]>=1:\n",
    "        d=[[left[0]-1, left[1]-1],[right[0]+1,right[1]+1],'R']\n",
    "#         print(d)\n",
    "        if (d[0][0]>=d[0][1] and d[1][0]>=d[1][1]) or (d[0][0]==0 or d[1][0]==0):\n",
    "            if d not in visited and d not in boat:\n",
    "                boat.append(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8af9857c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[[3, 3], [0, 0], 'L'],\n",
       " [[3, 1], [0, 2], 'R'],\n",
       " [[3, 2], [0, 1], 'R'],\n",
       " [[2, 2], [1, 1], 'R'],\n",
       " [[3, 2], [0, 1], 'L'],\n",
       " [[3, 0], [0, 3], 'R'],\n",
       " [[3, 1], [0, 2], 'L'],\n",
       " [[1, 1], [2, 2], 'R'],\n",
       " [[2, 2], [1, 1], 'L'],\n",
       " [[0, 2], [3, 1], 'R'],\n",
       " [[0, 3], [3, 0], 'L'],\n",
       " [[0, 1], [3, 2], 'R'],\n",
       " [[1, 1], [2, 2], 'L']]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visited"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a880a283",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
